// Burada Kotlin'de Array , List , Map ve Set Kullanımını ve Basit örnekler yer alacak . Belki Daha sonra UFUK ACICI Örneklerde yazılabilir.



// 1. Kotlinde Array Nasıl Oluşturulur ? 

/*

Kotlin Dizi Tanımlama
Sabit Boyutlu Dizi oluşturduğumuzda , diziye bir değer verdikten sonra dizinin boyutunu sonrada değitiremiyorumz.
Sabit Boyutlu Bir Diziyi,
val diziAdi = Array<Dizinin Tipi>(diziUzunluğu){başlangıç değerleri}
şeklinde oluşturabiliriz. 

*/

val intArray = Array<Int>(1123){0} 
val stringArray = Array<String>(1123){""}
val doubleArray = Array<Double>(1123){1.0}
val charArray = Array<Char>(1213){'A'}


//Bu dizilere değer atamak için bir çok farklı yol var , bunlardan en yalın olanları şöyle : 

intArray[0] = 43424332432  // Dizinin ilk elemanına değer atadık. Diziler  her zaman 0. elemanla başlar.Tabi Kullanıcı bunu isterse değiştire bilir ama 12.sırada da başlaya bilir . Ama varsayılar yani diziye müdahale edilmediği sürede 0.elemadan başlar.
intArray[1] = 123
intArray[2] = 4123
    "       "   "
    "       "   "
    "       "   "
intArray[1122] =  41233    // Dizinin son elemanınıda ekledik. Dikkat : Son elemanı dizinin boyutundan 1'eksiğinci sıradadır.


 // Dizilere birde SET() Fonksiyonu-Metodu ile eleman ekleye biliriz. SET() Methodun Kullanımı :
 //intArray.set(dizinin kaçıncı indeks-sırası ,Hangi int(tam sayı) değer eklenecek)
 
intArray.set(0,43424332432) // Dizinin ilk elemanına değer atadık. Diziler  her zaman 0. elemanla başlar.Tabi Kullanıcı bunu isterse değiştire bilir ama 12.sırada da başlaya bilir . Ama varsayılar yani diziye müdahale edilmediği sürede 0.elemadan başlar.
intArray.set(1,123)
intArray.set(2, 4123)
    "       "   "
    "       "   "
    "       "   "
intArray.set(1122, 41233)    // Dizinin son elemanınıda ekledik. Dikkat : Son elemanı dizinin boyutundan 1'eksiğinci sıradadır.


/*
Diziden Değer Okuma
Diziden değerleri diziAdi[indeks]  şeklinde veya diziAdi.get(indeks) şeklinde okuyabiliriz.


Diziden Değerleri oku/Çağır/almak  ' tan sonra bunları istersen konsoldan istersekde her hangi bir yerde kullanabiliriz ve 
görüntü sağlaya biliriz . 
Konsoldan Ekrana ve Eğer .XML dosyanıda bir TextView oluşturulduğunu var sayarak  çekilen bilgileri bizim reelde görebileceğimiz durumu getireceğiz.
*/

// Diziden veri çekmek için :
intArray[0] // dediğimizde bize dizinin 0. elemanını getirir. Eğer konsoldan görüntülemek istersek:
println(intArray[0])  // ya da
print(intArray[0]) // şeklinde görüntüleyebiliriz.
//Ya da elinizde bir .XML dosyası ve bu dosya içersinde TextView oluşturup id:textView olan uygulamayı Android Uygulama arayüzünde görmek için:
textView.text = intArray[0] //oluşturarak android uygulamanın ekranında görebiliriz.Tabi ekranda görebilmek için .XML dosyasının nasıl kullanıldığını ve TextView nasıl oluşturup kullanıldığı öğrenmiş olamanız lazım.

// Ve Farklı bir çağırma şekli daha var Get() Metodu(fonksiyonu) ile : dizi_adi.get(Kaçıncı_indeksi_Çağıracaksın?) ; kullanımı şekllindedir.
intArray.get(0) // 0. elemanı çağırdık ve bu çağırma yönteminide reelde görüntülemek istiyorsak konsol ve TextView ile çağırılan elemanı görüntüleye biliriz.


// DİZİ BOYUTU ( ARRAY SİZE) : Dizide kaç eleman olduğu ya da sabit bir dizi için kaç tane eleman/veri girişi/bulunduğuna bakabiliriz. Bu özelliği Döngülerde(on the LOOPS) sıksık kulanıma ihtiyaç duyulur.

vall diziBoyutu:Int = 0 // dizi boyutunu saklamak için bir değişken tanımladım
diziBoyutu=intArray.size  // Dizi boyutunu bir istedik ve = (atama) ile değişkenin içinde sakladık.

//____________________________________________________________ LIST or ArrayList ____________________________________________

//  ArrayList Metodu'nun normal array'lerden farkı, Normal Array'i tanımlarken sabit bir değer verirken ArrayList'te sabit bir değer vermeden kullanırız.Normal Array ile ArrayList Arasındaki fark sadece bu kadardır.Kullanımları ve Yapıları bir birine çok benzer
//  ArrayList tanımları şu şekilde : 5 farklı ArrayList Tanımı ,

val arrayList: ArrayList<String> = ArrayList<String>()
val arrayList2 = ArrayList<String>()
val arrayList3 = ArrayList<Int>()
val arrayList4 = ArrayList<Double>()
val arrayList5 = ArrayList<HerHangiBirClass>()



// #ArrayList’e item eklemek için add() methodunu kullanırız.


// Yukarıda Tanımladığımız arrayList ' te veri şöyle eklenir.( karakter tipinde)
arrayList.add("ilk veri eklendi : 0.dizine ") // ya da 
arrayList.add(0,"ilk veri eklendi : 0.dizine ") // şeklinde 2 farklı kullanımı vardır.
arrayList.add("ikinci veri eklendi")
arrayList.add(1,"ikinci veri eklendi : 1.indeks-dizine")
arrayList.add("üçüncü veri eklendi") // bu 2. dizine eklendi ama ben 2. dizine başka bir yazi ekleyebiliriim.
arrayList.add(2,"Veriye Değiştirdim Artık 2.index-dizinde farklı vir veri duruyor.")

// Yukarıda Tanımladığımız arrayList ' te veri şöyle eklenir.( Tam sayı tipinde)
val arrayList2 = ArrayList<Int>()
arrayList2.add(3) // 0.indekste(dizinde) 3 tam sayısını ekledik.
arrayList2.add(1,5) // 1. indekste(dizinde) 5 tam sayısını ekledim.
arrayList2.add(7)  // indeks numarası vermediğimiz için bir sonraki indekse eklendi yani 2.indekse eklendi.

// #ArrayList’ten item almak (get methodu) kullanırız.
// YUKARIDA EKLEDİKERİMİZ ŞİMDİ ÇAĞIRALIM ve bir değişkenin içine atayalım.

var deger1: String = arrayList.get(0) //ArrayListin 0. elemanını almak için
var deger2: String = arrayList.get(2) //ArrayListin 2. elemanını almak için
var deger3: String = arrayList[3] //ArrayListin 3. elemanını almak için
 


// ArrayList’ten item silmek (remove,removeAt) metodlarını kullanırız.
// remove ile ArrayList'in içine kaydettiğimiz veriyi yazarak silebiliriz.
// removeAt ile Arraylist'in indeks-dizin-sırası'daki veriyi sileriz . Kullanım Örneği :

arrayList.remove("ilk veri eklendi : 0.dizine ") // yukarıdaki örnekte eklemiştik şimdi eklediğimiz veriyi sildik.Aslında veriyi kendi değeri ile silmiş olduk.

arrayList.removeAt(2) // yukarıda örnekte 2. indeks-sıra-dizin'e eklediğimi string-karakter verisini indeks numarası ile sildim.


//ARRAYLIST'te ÇOK KULLANACAĞIM BİR KAÇ METHOD : 



















